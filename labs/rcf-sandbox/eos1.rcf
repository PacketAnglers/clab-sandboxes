code unit CALLED_FUNCTIONS
#
########################################################################################
#
#
# Called Functions
#
#
########################################################################################
#
########################################################################################
# Called function: Evaluate if prefix is an IPv4 or IPv6 Default Route
########################################################################################
function DEFAULT_ROUTE() {
    return prefix is 0.0.0.0/0 or prefix is ::/0;
}
########################################################################################
# Called function: Evaluate if Standard Communities used for Cust peering are present
########################################################################################
function DIA_CUSTOMER_COMMUNITIES_ARE_PRESENT() {
    return community has_any {100:4000, 100:4001, 100:4002, 100:4003};
}
########################################################################################
# Called function: Evaluate if Prefix length is less than /8 or greater than /24
########################################################################################
function INVALID_PREFIX_LENGTH() {
    return prefix.length < 8 or prefix.length > 24;
}
########################################################################################
# Called function: Evaluate if the Standard Community used for transit peers is present
########################################################################################
function TRANSIT_PEER_COMMUNITY_IS_PRESENT() {
    return community has_any {100:1000};
}
########################################################################################
# Called function: Evaluate if the 100:$ARG Local Pref Community is Present
########################################################################################
function LOCAL_PREF_COMMUNITY( int_type $lp_value ) {
    return community has_any {100:$lp_value};
}
#
EOF
code unit POA_FUNCTIONS
########################################################################################
#
#
# Point of Application Functions
#
#
########################################################################################
#
########################################################################################
# Point of Application Function: Outbound to "Default-Only" DIA Customer
########################################################################################
function DIA_DEFAULT_ONLY_OUTBOUND() {
    if DEFAULT_ROUTE() {
        return true;
    } else {
        return false;
    }
}
########################################################################################
# Point of Application Function: Inbound from DIA Customer
########################################################################################
function DIA_INBOUND( prefix_list_type $prefixlist ) {
    if prefix match $prefixlist {
        community add community_list DIA-CUSTOMER-ROUTE-SET;
        if LOCAL_PREF_COMMUNITY(75) {
            local_preference = 75;
        } else if LOCAL_PREF_COMMUNITY(80) {
            local_preference = 80;
        } else if LOCAL_PREF_COMMUNITY(85) {
            local_preference = 85;
        } else if LOCAL_PREF_COMMUNITY(90) {
            local_preference = 90;
        } else if LOCAL_PREF_COMMUNITY(100) {
            local_preference = 100;
        } else if LOCAL_PREF_COMMUNITY(105) {
            local_preference = 105;
        }
        return true;
    } else {
        return false;
    }
}
########################################################################################
# Point of Application Function: Outbound to "Default+Customer Routes" DIA Customer
########################################################################################
function DIA_PARTIAL_ROUTES_OUTBOUND() {
    if DEFAULT_ROUTE() or DIA_CUSTOMER_COMMUNITIES_ARE_PRESENT() {
        return true;
    } else {
        return false;
    }
}
########################################################################################
# Point of Application Function: Transit Peering
########################################################################################
function TRANSIT_PEERING_IN() {
if ( as_path.origin_as is 300 and ( as_path has_none { 200 } or prefix covered_by 3.1.0.0/16 ) ) {
    local_preference += 100;
    community add { 100:999, 100:1000 };
}
if input.community is empty {
    community add { 100:1000 };
}
    return true;
}
EOF
